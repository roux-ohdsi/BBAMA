// Generated by rstantools.  Do not edit by hand.

/*
    BBAMA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BBAMA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BBAMA.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_bbama_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bbama");
    reader.add_event(213, 211, "end", "model_bbama");
    return reader;
}
template <typename T0__>
int
count_up(const T0__& how_far, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        int j(0);
        (void) j;  // dummy to suppress unused var warning
        stan::math::fill(j, std::numeric_limits<int>::min());
        stan::math::assign(j,0);
        current_statement_begin__ = 5;
        while (as_bool(logical_lte(j, how_far))) {
            current_statement_begin__ = 6;
            stan::math::assign(j, (j + 1));
        }
        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(j);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct count_up_functor__ {
    template <typename T0__>
        int
    operator()(const T0__& how_far, std::ostream* pstream__) const {
        return count_up(how_far, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__, T_lp__>::type>::type
grid_lp(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& theta_tilde,
            const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& ll,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& vals_evaled,
            const int& n_vals,
            const T4__& min_val,
            const T5__& max_val, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 16;
        local_scalar_t__ lprob(DUMMY_VAR__);
        (void) lprob;  // dummy to suppress unused var warning
        stan::math::initialize(lprob, DUMMY_VAR__);
        stan::math::fill(lprob, DUMMY_VAR__);
        stan::math::assign(lprob,0);
        current_statement_begin__ = 18;
        for (int i = 1; i <= num_elements(theta_tilde); ++i) {
            {
            current_statement_begin__ = 19;
            local_scalar_t__ x(DUMMY_VAR__);
            (void) x;  // dummy to suppress unused var warning
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 20;
            local_scalar_t__ how_far(DUMMY_VAR__);
            (void) how_far;  // dummy to suppress unused var warning
            stan::math::initialize(how_far, DUMMY_VAR__);
            stan::math::fill(how_far, DUMMY_VAR__);
            current_statement_begin__ = 21;
            int floor_ind(0);
            (void) floor_ind;  // dummy to suppress unused var warning
            stan::math::fill(floor_ind, std::numeric_limits<int>::min());
            current_statement_begin__ = 22;
            int ceil_ind(0);
            (void) ceil_ind;  // dummy to suppress unused var warning
            stan::math::fill(ceil_ind, std::numeric_limits<int>::min());
            current_statement_begin__ = 23;
            local_scalar_t__ val_lo(DUMMY_VAR__);
            (void) val_lo;  // dummy to suppress unused var warning
            stan::math::initialize(val_lo, DUMMY_VAR__);
            stan::math::fill(val_lo, DUMMY_VAR__);
            current_statement_begin__ = 24;
            local_scalar_t__ val_up(DUMMY_VAR__);
            (void) val_up;  // dummy to suppress unused var warning
            stan::math::initialize(val_up, DUMMY_VAR__);
            stan::math::fill(val_up, DUMMY_VAR__);
            current_statement_begin__ = 25;
            local_scalar_t__ ll_lo(DUMMY_VAR__);
            (void) ll_lo;  // dummy to suppress unused var warning
            stan::math::initialize(ll_lo, DUMMY_VAR__);
            stan::math::fill(ll_lo, DUMMY_VAR__);
            current_statement_begin__ = 26;
            local_scalar_t__ ll_up(DUMMY_VAR__);
            (void) ll_up;  // dummy to suppress unused var warning
            stan::math::initialize(ll_up, DUMMY_VAR__);
            stan::math::fill(ll_up, DUMMY_VAR__);
            current_statement_begin__ = 28;
            stan::math::assign(x, get_base1(theta_tilde, i, "theta_tilde", 1));
            current_statement_begin__ = 29;
            if (as_bool((primitive_value(logical_lt(x, min_val)) || primitive_value(logical_gt(x, max_val))))) {
                current_statement_begin__ = 30;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "proposal not in range";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 33;
            stan::math::assign(how_far, (((x - min_val) * n_vals) / (max_val - min_val)));
            current_statement_begin__ = 34;
            stan::math::assign(ceil_ind, count_up(how_far, pstream__));
            current_statement_begin__ = 35;
            if (as_bool(logical_eq(ceil_ind, 1))) {
                current_statement_begin__ = 36;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "proposal not in range";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 37;
            stan::math::assign(floor_ind, (ceil_ind - 1));
            current_statement_begin__ = 39;
            stan::math::assign(ll_lo, get_base1(get_base1(ll, floor_ind, "ll", 1), i, "ll", 2));
            current_statement_begin__ = 41;
            stan::math::assign(ll_up, get_base1(get_base1(ll, ceil_ind, "ll", 1), i, "ll", 2));
            current_statement_begin__ = 42;
            stan::math::assign(val_lo, get_base1(vals_evaled, floor_ind, "vals_evaled", 1));
            current_statement_begin__ = 43;
            stan::math::assign(val_up, get_base1(vals_evaled, ceil_ind, "vals_evaled", 1));
            current_statement_begin__ = 45;
            stan::math::assign(lprob, ((ll_lo + (((x - val_lo) * (ll_up - ll_lo)) / (val_up - val_lo))) + lprob));
            }
        }
        current_statement_begin__ = 48;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lprob);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct grid_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__, T_lp__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& theta_tilde,
            const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& ll,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& vals_evaled,
            const int& n_vals,
            const T4__& min_val,
            const T5__& max_val, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return grid_lp(theta_tilde, ll, vals_evaled, n_vals, min_val, max_val, lp__, lp_accum__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_bbama
  : public stan::model::model_base_crtp<model_bbama> {
private:
        int dist_main;
        int dist_bias;
        int fixed_main;
        int fixed_bias;
        int M;
        int N;
        std::vector<int> site;
        std::vector<int> y_int;
        std::vector<int> x_int;
        vector_d y_star;
        vector_d x_star;
        vector_d y;
        vector_d x;
        vector_d s_0;
        vector_d s_j;
        int n_vals;
        std::vector<vector_d> ll;
        vector_d vals_evaled;
        double min_val;
        double max_val;
        int K;
        matrix_d p;
        int L;
        matrix_d q;
        double mu_mean;
        double mu_sd;
        double tau_mean;
        double tau_sd;
        double lambda_mean;
        double lambda_sd;
        double eta_mean;
        double eta_sd;
        vector_d gamma_mean;
        vector_d gamma_sd;
public:
    model_bbama(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_bbama(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_bbama_namespace::model_bbama";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "dist_main", "int", context__.to_vec());
            dist_main = int(0);
            vals_i__ = context__.vals_i("dist_main");
            pos__ = 0;
            dist_main = vals_i__[pos__++];
            check_greater_or_equal(function__, "dist_main", dist_main, 1);
            check_less_or_equal(function__, "dist_main", dist_main, 3);
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "dist_bias", "int", context__.to_vec());
            dist_bias = int(0);
            vals_i__ = context__.vals_i("dist_bias");
            pos__ = 0;
            dist_bias = vals_i__[pos__++];
            check_greater_or_equal(function__, "dist_bias", dist_bias, 0);
            check_less_or_equal(function__, "dist_bias", dist_bias, 3);
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "fixed_main", "int", context__.to_vec());
            fixed_main = int(0);
            vals_i__ = context__.vals_i("fixed_main");
            pos__ = 0;
            fixed_main = vals_i__[pos__++];
            check_greater_or_equal(function__, "fixed_main", fixed_main, 0);
            check_less_or_equal(function__, "fixed_main", fixed_main, 1);
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "fixed_bias", "int", context__.to_vec());
            fixed_bias = int(0);
            vals_i__ = context__.vals_i("fixed_bias");
            pos__ = 0;
            fixed_bias = vals_i__[pos__++];
            check_greater_or_equal(function__, "fixed_bias", fixed_bias, 0);
            check_less_or_equal(function__, "fixed_bias", fixed_bias, 1);
            current_statement_begin__ = 59;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 61;
            validate_non_negative_index("site", "N", N);
            context__.validate_dims("data initialization", "site", "int", context__.to_vec(N));
            site = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("site");
            pos__ = 0;
            size_t site_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < site_k_0_max__; ++k_0__) {
                site[k_0__] = vals_i__[pos__++];
            }
            size_t site_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < site_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "site[i_0__]", site[i_0__], 0);
                check_less_or_equal(function__, "site[i_0__]", site[i_0__], N);
            }
            current_statement_begin__ = 64;
            validate_non_negative_index("y_int", "(logical_eq(dist_main, 1) ? M : 0 )", (logical_eq(dist_main, 1) ? M : 0 ));
            context__.validate_dims("data initialization", "y_int", "int", context__.to_vec((logical_eq(dist_main, 1) ? M : 0 )));
            y_int = std::vector<int>((logical_eq(dist_main, 1) ? M : 0 ), int(0));
            vals_i__ = context__.vals_i("y_int");
            pos__ = 0;
            size_t y_int_k_0_max__ = (logical_eq(dist_main, 1) ? M : 0 );
            for (size_t k_0__ = 0; k_0__ < y_int_k_0_max__; ++k_0__) {
                y_int[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 65;
            validate_non_negative_index("x_int", "(logical_eq(dist_bias, 1) ? N : 0 )", (logical_eq(dist_bias, 1) ? N : 0 ));
            context__.validate_dims("data initialization", "x_int", "int", context__.to_vec((logical_eq(dist_bias, 1) ? N : 0 )));
            x_int = std::vector<int>((logical_eq(dist_bias, 1) ? N : 0 ), int(0));
            vals_i__ = context__.vals_i("x_int");
            pos__ = 0;
            size_t x_int_k_0_max__ = (logical_eq(dist_bias, 1) ? N : 0 );
            for (size_t k_0__ = 0; k_0__ < x_int_k_0_max__; ++k_0__) {
                x_int[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 66;
            validate_non_negative_index("y_star", "(logical_eq(dist_main, 1) ? M : 0 )", (logical_eq(dist_main, 1) ? M : 0 ));
            context__.validate_dims("data initialization", "y_star", "vector_d", context__.to_vec((logical_eq(dist_main, 1) ? M : 0 )));
            y_star = Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(dist_main, 1) ? M : 0 ));
            vals_r__ = context__.vals_r("y_star");
            pos__ = 0;
            size_t y_star_j_1_max__ = (logical_eq(dist_main, 1) ? M : 0 );
            for (size_t j_1__ = 0; j_1__ < y_star_j_1_max__; ++j_1__) {
                y_star(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "y_star", y_star, 0);
            current_statement_begin__ = 67;
            validate_non_negative_index("x_star", "(logical_eq(dist_bias, 1) ? N : 0 )", (logical_eq(dist_bias, 1) ? N : 0 ));
            context__.validate_dims("data initialization", "x_star", "vector_d", context__.to_vec((logical_eq(dist_bias, 1) ? N : 0 )));
            x_star = Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(dist_bias, 1) ? N : 0 ));
            vals_r__ = context__.vals_r("x_star");
            pos__ = 0;
            size_t x_star_j_1_max__ = (logical_eq(dist_bias, 1) ? N : 0 );
            for (size_t j_1__ = 0; j_1__ < x_star_j_1_max__; ++j_1__) {
                x_star(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "x_star", x_star, 0);
            current_statement_begin__ = 70;
            validate_non_negative_index("y", "(logical_eq(dist_main, 2) ? M : 0 )", (logical_eq(dist_main, 2) ? M : 0 ));
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec((logical_eq(dist_main, 2) ? M : 0 )));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(dist_main, 2) ? M : 0 ));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = (logical_eq(dist_main, 2) ? M : 0 );
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 71;
            validate_non_negative_index("x", "(logical_eq(dist_bias, 2) ? N : 0 )", (logical_eq(dist_bias, 2) ? N : 0 ));
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec((logical_eq(dist_bias, 2) ? N : 0 )));
            x = Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(dist_bias, 2) ? N : 0 ));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = (logical_eq(dist_bias, 2) ? N : 0 );
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                x(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 72;
            validate_non_negative_index("s_0", "(logical_eq(dist_main, 2) ? M : 0 )", (logical_eq(dist_main, 2) ? M : 0 ));
            context__.validate_dims("data initialization", "s_0", "vector_d", context__.to_vec((logical_eq(dist_main, 2) ? M : 0 )));
            s_0 = Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(dist_main, 2) ? M : 0 ));
            vals_r__ = context__.vals_r("s_0");
            pos__ = 0;
            size_t s_0_j_1_max__ = (logical_eq(dist_main, 2) ? M : 0 );
            for (size_t j_1__ = 0; j_1__ < s_0_j_1_max__; ++j_1__) {
                s_0(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "s_0", s_0, 0);
            current_statement_begin__ = 73;
            validate_non_negative_index("s_j", "(logical_eq(dist_bias, 2) ? N : 0 )", (logical_eq(dist_bias, 2) ? N : 0 ));
            context__.validate_dims("data initialization", "s_j", "vector_d", context__.to_vec((logical_eq(dist_bias, 2) ? N : 0 )));
            s_j = Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(dist_bias, 2) ? N : 0 ));
            vals_r__ = context__.vals_r("s_j");
            pos__ = 0;
            size_t s_j_j_1_max__ = (logical_eq(dist_bias, 2) ? N : 0 );
            for (size_t j_1__ = 0; j_1__ < s_j_j_1_max__; ++j_1__) {
                s_j(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "s_j", s_j, 0);
            current_statement_begin__ = 76;
            context__.validate_dims("data initialization", "n_vals", "int", context__.to_vec());
            n_vals = int(0);
            vals_i__ = context__.vals_i("n_vals");
            pos__ = 0;
            n_vals = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_vals", n_vals, 0);
            current_statement_begin__ = 77;
            validate_non_negative_index("ll", "(logical_eq(dist_main, 3) ? M : 0 )", (logical_eq(dist_main, 3) ? M : 0 ));
            validate_non_negative_index("ll", "n_vals", n_vals);
            context__.validate_dims("data initialization", "ll", "vector_d", context__.to_vec(n_vals,(logical_eq(dist_main, 3) ? M : 0 )));
            ll = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_vals, Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(dist_main, 3) ? M : 0 )));
            vals_r__ = context__.vals_r("ll");
            pos__ = 0;
            size_t ll_j_1_max__ = (logical_eq(dist_main, 3) ? M : 0 );
            size_t ll_k_0_max__ = n_vals;
            for (size_t j_1__ = 0; j_1__ < ll_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < ll_k_0_max__; ++k_0__) {
                    ll[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 78;
            validate_non_negative_index("vals_evaled", "n_vals", n_vals);
            context__.validate_dims("data initialization", "vals_evaled", "vector_d", context__.to_vec(n_vals));
            vals_evaled = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_vals);
            vals_r__ = context__.vals_r("vals_evaled");
            pos__ = 0;
            size_t vals_evaled_j_1_max__ = n_vals;
            for (size_t j_1__ = 0; j_1__ < vals_evaled_j_1_max__; ++j_1__) {
                vals_evaled(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "min_val", "double", context__.to_vec());
            min_val = double(0);
            vals_r__ = context__.vals_r("min_val");
            pos__ = 0;
            min_val = vals_r__[pos__++];
            current_statement_begin__ = 80;
            context__.validate_dims("data initialization", "max_val", "double", context__.to_vec());
            max_val = double(0);
            vals_r__ = context__.vals_r("max_val");
            pos__ = 0;
            max_val = vals_r__[pos__++];
            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 84;
            validate_non_negative_index("p", "(fixed_main ? M : 0 )", (fixed_main ? M : 0 ));
            validate_non_negative_index("p", "K", K);
            context__.validate_dims("data initialization", "p", "matrix_d", context__.to_vec((fixed_main ? M : 0 ),K));
            p = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((fixed_main ? M : 0 ), K);
            vals_r__ = context__.vals_r("p");
            pos__ = 0;
            size_t p_j_2_max__ = K;
            size_t p_j_1_max__ = (fixed_main ? M : 0 );
            for (size_t j_2__ = 0; j_2__ < p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                    p(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 87;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            current_statement_begin__ = 88;
            validate_non_negative_index("q", "(fixed_bias ? M : 0 )", (fixed_bias ? M : 0 ));
            validate_non_negative_index("q", "L", L);
            context__.validate_dims("data initialization", "q", "matrix_d", context__.to_vec((fixed_bias ? M : 0 ),L));
            q = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((fixed_bias ? M : 0 ), L);
            vals_r__ = context__.vals_r("q");
            pos__ = 0;
            size_t q_j_2_max__ = L;
            size_t q_j_1_max__ = (fixed_bias ? M : 0 );
            for (size_t j_2__ = 0; j_2__ < q_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                    q(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "mu_mean", "double", context__.to_vec());
            mu_mean = double(0);
            vals_r__ = context__.vals_r("mu_mean");
            pos__ = 0;
            mu_mean = vals_r__[pos__++];
            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "mu_sd", "double", context__.to_vec());
            mu_sd = double(0);
            vals_r__ = context__.vals_r("mu_sd");
            pos__ = 0;
            mu_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_sd", mu_sd, 0);
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "tau_mean", "double", context__.to_vec());
            tau_mean = double(0);
            vals_r__ = context__.vals_r("tau_mean");
            pos__ = 0;
            tau_mean = vals_r__[pos__++];
            current_statement_begin__ = 94;
            context__.validate_dims("data initialization", "tau_sd", "double", context__.to_vec());
            tau_sd = double(0);
            vals_r__ = context__.vals_r("tau_sd");
            pos__ = 0;
            tau_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "tau_sd", tau_sd, 0);
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "lambda_mean", "double", context__.to_vec());
            lambda_mean = double(0);
            vals_r__ = context__.vals_r("lambda_mean");
            pos__ = 0;
            lambda_mean = vals_r__[pos__++];
            current_statement_begin__ = 96;
            context__.validate_dims("data initialization", "lambda_sd", "double", context__.to_vec());
            lambda_sd = double(0);
            vals_r__ = context__.vals_r("lambda_sd");
            pos__ = 0;
            lambda_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "lambda_sd", lambda_sd, 0);
            current_statement_begin__ = 97;
            context__.validate_dims("data initialization", "eta_mean", "double", context__.to_vec());
            eta_mean = double(0);
            vals_r__ = context__.vals_r("eta_mean");
            pos__ = 0;
            eta_mean = vals_r__[pos__++];
            current_statement_begin__ = 98;
            context__.validate_dims("data initialization", "eta_sd", "double", context__.to_vec());
            eta_sd = double(0);
            vals_r__ = context__.vals_r("eta_sd");
            pos__ = 0;
            eta_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "eta_sd", eta_sd, 0);
            current_statement_begin__ = 101;
            validate_non_negative_index("gamma_mean", "M", M);
            context__.validate_dims("data initialization", "gamma_mean", "vector_d", context__.to_vec(M));
            gamma_mean = Eigen::Matrix<double, Eigen::Dynamic, 1>(M);
            vals_r__ = context__.vals_r("gamma_mean");
            pos__ = 0;
            size_t gamma_mean_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < gamma_mean_j_1_max__; ++j_1__) {
                gamma_mean(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 102;
            validate_non_negative_index("gamma_sd", "M", M);
            context__.validate_dims("data initialization", "gamma_sd", "vector_d", context__.to_vec(M));
            gamma_sd = Eigen::Matrix<double, Eigen::Dynamic, 1>(M);
            vals_r__ = context__.vals_r("gamma_sd");
            pos__ = 0;
            size_t gamma_sd_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < gamma_sd_j_1_max__; ++j_1__) {
                gamma_sd(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "gamma_sd", gamma_sd, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 107;
            num_params_r__ += 1;
            current_statement_begin__ = 108;
            num_params_r__ += 1;
            current_statement_begin__ = 111;
            validate_non_negative_index("lambda", "(logical_eq(dist_bias, 0) ? 0 : 1 )", (logical_eq(dist_bias, 0) ? 0 : 1 ));
            num_params_r__ += (logical_eq(dist_bias, 0) ? 0 : 1 );
            current_statement_begin__ = 112;
            validate_non_negative_index("eta", "(logical_eq(dist_bias, 0) ? 0 : 1 )", (logical_eq(dist_bias, 0) ? 0 : 1 ));
            num_params_r__ += (logical_eq(dist_bias, 0) ? 0 : 1 );
            current_statement_begin__ = 115;
            validate_non_negative_index("delta", "(logical_eq(dist_bias, 0) ? 0 : M )", (logical_eq(dist_bias, 0) ? 0 : M ));
            num_params_r__ += (logical_eq(dist_bias, 0) ? 0 : M );
            current_statement_begin__ = 116;
            validate_non_negative_index("gamma", "(logical_eq(dist_bias, 0) ? 0 : M )", (logical_eq(dist_bias, 0) ? 0 : M ));
            num_params_r__ += (logical_eq(dist_bias, 0) ? 0 : M );
            current_statement_begin__ = 119;
            validate_non_negative_index("theta_0", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 121;
            validate_non_negative_index("alpha", "(fixed_main ? K : 0 )", (fixed_main ? K : 0 ));
            num_params_r__ += (fixed_main ? K : 0 );
            current_statement_begin__ = 123;
            validate_non_negative_index("omega", "(fixed_bias ? L : 0 )", (fixed_bias ? L : 0 ));
            num_params_r__ += (fixed_bias ? L : 0 );
            current_statement_begin__ = 126;
            validate_non_negative_index("beta_0", "(logical_eq(dist_bias, 0) ? 0 : M )", (logical_eq(dist_bias, 0) ? 0 : M ));
            num_params_r__ += (logical_eq(dist_bias, 0) ? 0 : M );
            current_statement_begin__ = 127;
            validate_non_negative_index("beta_j", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_bbama() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 107;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu", "double", context__.to_vec());
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 108;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 111;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "(logical_eq(dist_bias, 0) ? 0 : 1 )", (logical_eq(dist_bias, 0) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "lambda", "vector_d", context__.to_vec((logical_eq(dist_bias, 0) ? 0 : 1 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda((logical_eq(dist_bias, 0) ? 0 : 1 ));
        size_t lambda_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : 1 );
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            lambda(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 112;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "(logical_eq(dist_bias, 0) ? 0 : 1 )", (logical_eq(dist_bias, 0) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec((logical_eq(dist_bias, 0) ? 0 : 1 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta((logical_eq(dist_bias, 0) ? 0 : 1 ));
        size_t eta_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : 1 );
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 115;
        if (!(context__.contains_r("delta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "(logical_eq(dist_bias, 0) ? 0 : M )", (logical_eq(dist_bias, 0) ? 0 : M ));
        context__.validate_dims("parameter initialization", "delta", "vector_d", context__.to_vec((logical_eq(dist_bias, 0) ? 0 : M )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta((logical_eq(dist_bias, 0) ? 0 : M ));
        size_t delta_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            delta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(delta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 116;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "(logical_eq(dist_bias, 0) ? 0 : M )", (logical_eq(dist_bias, 0) ? 0 : M ));
        context__.validate_dims("parameter initialization", "gamma", "vector_d", context__.to_vec((logical_eq(dist_bias, 0) ? 0 : M )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma((logical_eq(dist_bias, 0) ? 0 : M ));
        size_t gamma_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            gamma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 119;
        if (!(context__.contains_r("theta_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_0");
        pos__ = 0U;
        validate_non_negative_index("theta_0", "M", M);
        context__.validate_dims("parameter initialization", "theta_0", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_0(M);
        size_t theta_0_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < theta_0_j_1_max__; ++j_1__) {
            theta_0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(theta_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 121;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "(fixed_main ? K : 0 )", (fixed_main ? K : 0 ));
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec((fixed_main ? K : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha((fixed_main ? K : 0 ));
        size_t alpha_j_1_max__ = (fixed_main ? K : 0 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 123;
        if (!(context__.contains_r("omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omega");
        pos__ = 0U;
        validate_non_negative_index("omega", "(fixed_bias ? L : 0 )", (fixed_bias ? L : 0 ));
        context__.validate_dims("parameter initialization", "omega", "vector_d", context__.to_vec((fixed_bias ? L : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> omega((fixed_bias ? L : 0 ));
        size_t omega_j_1_max__ = (fixed_bias ? L : 0 );
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            omega(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 126;
        if (!(context__.contains_r("beta_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_0");
        pos__ = 0U;
        validate_non_negative_index("beta_0", "(logical_eq(dist_bias, 0) ? 0 : M )", (logical_eq(dist_bias, 0) ? 0 : M ));
        context__.validate_dims("parameter initialization", "beta_0", "vector_d", context__.to_vec((logical_eq(dist_bias, 0) ? 0 : M )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_0((logical_eq(dist_bias, 0) ? 0 : M ));
        size_t beta_0_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < beta_0_j_1_max__; ++j_1__) {
            beta_0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 127;
        if (!(context__.contains_r("beta_j")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_j missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_j");
        pos__ = 0U;
        validate_non_negative_index("beta_j", "N", N);
        context__.validate_dims("parameter initialization", "beta_j", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_j(N);
        size_t beta_j_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < beta_j_j_1_max__; ++j_1__) {
            beta_j(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_j);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_j: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 107;
            local_scalar_t__ mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.scalar_constrain(lp__);
            else
                mu = in__.scalar_constrain();
            current_statement_begin__ = 108;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 111;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.vector_constrain((logical_eq(dist_bias, 0) ? 0 : 1 ), lp__);
            else
                lambda = in__.vector_constrain((logical_eq(dist_bias, 0) ? 0 : 1 ));
            current_statement_begin__ = 112;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_lb_constrain(0, (logical_eq(dist_bias, 0) ? 0 : 1 ), lp__);
            else
                eta = in__.vector_lb_constrain(0, (logical_eq(dist_bias, 0) ? 0 : 1 ));
            current_statement_begin__ = 115;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta;
            (void) delta;  // dummy to suppress unused var warning
            if (jacobian__)
                delta = in__.vector_constrain((logical_eq(dist_bias, 0) ? 0 : M ), lp__);
            else
                delta = in__.vector_constrain((logical_eq(dist_bias, 0) ? 0 : M ));
            current_statement_begin__ = 116;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.vector_lb_constrain(0, (logical_eq(dist_bias, 0) ? 0 : M ), lp__);
            else
                gamma = in__.vector_lb_constrain(0, (logical_eq(dist_bias, 0) ? 0 : M ));
            current_statement_begin__ = 119;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_0;
            (void) theta_0;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_0 = in__.vector_constrain(M, lp__);
            else
                theta_0 = in__.vector_constrain(M);
            current_statement_begin__ = 121;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_constrain((fixed_main ? K : 0 ), lp__);
            else
                alpha = in__.vector_constrain((fixed_main ? K : 0 ));
            current_statement_begin__ = 123;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> omega;
            (void) omega;  // dummy to suppress unused var warning
            if (jacobian__)
                omega = in__.vector_constrain((fixed_bias ? L : 0 ), lp__);
            else
                omega = in__.vector_constrain((fixed_bias ? L : 0 ));
            current_statement_begin__ = 126;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_0;
            (void) beta_0;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_0 = in__.vector_constrain((logical_eq(dist_bias, 0) ? 0 : M ), lp__);
            else
                beta_0 = in__.vector_constrain((logical_eq(dist_bias, 0) ? 0 : M ));
            current_statement_begin__ = 127;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_j;
            (void) beta_j;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_j = in__.vector_constrain(N, lp__);
            else
                beta_j = in__.vector_constrain(N);
            // model body
            {
            current_statement_begin__ = 131;
            validate_non_negative_index("theta_tilde", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_tilde(M);
            stan::math::initialize(theta_tilde, DUMMY_VAR__);
            stan::math::fill(theta_tilde, DUMMY_VAR__);
            current_statement_begin__ = 132;
            validate_non_negative_index("delta_star", "(logical_eq(dist_bias, 0) ? 0 : M )", (logical_eq(dist_bias, 0) ? 0 : M ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_star((logical_eq(dist_bias, 0) ? 0 : M ));
            stan::math::initialize(delta_star, DUMMY_VAR__);
            stan::math::fill(delta_star, DUMMY_VAR__);
            current_statement_begin__ = 135;
            validate_non_negative_index("beta_j_star", "(logical_eq(dist_bias, 1) ? N : 0 )", (logical_eq(dist_bias, 1) ? N : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_j_star((logical_eq(dist_bias, 1) ? N : 0 ));
            stan::math::initialize(beta_j_star, DUMMY_VAR__);
            stan::math::fill(beta_j_star, DUMMY_VAR__);
            current_statement_begin__ = 136;
            validate_non_negative_index("theta_tilde_star", "(logical_eq(dist_main, 1) ? M : 0 )", (logical_eq(dist_main, 1) ? M : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_tilde_star((logical_eq(dist_main, 1) ? M : 0 ));
            stan::math::initialize(theta_tilde_star, DUMMY_VAR__);
            stan::math::fill(theta_tilde_star, DUMMY_VAR__);
            current_statement_begin__ = 139;
            lp_accum__.add(normal_log<propto__>(mu, mu_mean, mu_sd));
            current_statement_begin__ = 140;
            lp_accum__.add(normal_log<propto__>(tau, tau_mean, tau_sd));
            current_statement_begin__ = 143;
            if (as_bool(logical_gt(dist_bias, 0))) {
                current_statement_begin__ = 144;
                lp_accum__.add(normal_log<propto__>(lambda, lambda_mean, lambda_sd));
                current_statement_begin__ = 145;
                lp_accum__.add(normal_log<propto__>(eta, eta_mean, eta_sd));
                current_statement_begin__ = 147;
                for (int i = 1; i <= M; ++i) {
                    current_statement_begin__ = 148;
                    lp_accum__.add(normal_log<propto__>(get_base1(delta, i, "delta", 1), lambda, eta));
                }
                current_statement_begin__ = 150;
                lp_accum__.add(normal_log<propto__>(gamma, gamma_mean, gamma_sd));
                current_statement_begin__ = 152;
                if (as_bool(logical_eq(fixed_bias, 1))) {
                    current_statement_begin__ = 153;
                    stan::math::assign(delta_star, add(delta, multiply(q, omega)));
                } else {
                    current_statement_begin__ = 155;
                    stan::math::assign(delta_star, delta);
                }
                current_statement_begin__ = 159;
                if (as_bool(logical_eq(dist_bias, 1))) {
                    current_statement_begin__ = 160;
                    for (int j = 1; j <= N; ++j) {
                        current_statement_begin__ = 161;
                        lp_accum__.add(normal_log<propto__>(get_base1(beta_j, j, "beta_j", 1), get_base1(delta_star, get_base1(site, j, "site", 1), "delta_star", 1), get_base1(gamma, get_base1(site, j, "site", 1), "gamma", 1)));
                        current_statement_begin__ = 162;
                        stan::model::assign(beta_j_star, 
                                    stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                    (stan::math::exp(get_base1(beta_j, j, "beta_j", 1)) * get_base1(x_star, j, "x_star", 1)), 
                                    "assigning variable beta_j_star");
                    }
                    current_statement_begin__ = 164;
                    lp_accum__.add(poisson_log<propto__>(x_int, beta_j_star));
                } else {
                    current_statement_begin__ = 166;
                    for (int j = 1; j <= N; ++j) {
                        current_statement_begin__ = 167;
                        lp_accum__.add(normal_log<propto__>(get_base1(beta_j, j, "beta_j", 1), get_base1(delta_star, get_base1(site, j, "site", 1), "delta_star", 1), get_base1(gamma, get_base1(site, j, "site", 1), "gamma", 1)));
                    }
                    current_statement_begin__ = 169;
                    lp_accum__.add(normal_log<propto__>(x, beta_j, s_j));
                }
                current_statement_begin__ = 171;
                lp_accum__.add(normal_log<propto__>(beta_0, delta_star, gamma));
                current_statement_begin__ = 173;
                if (as_bool(logical_eq(fixed_main, 1))) {
                    current_statement_begin__ = 174;
                    stan::math::assign(theta_tilde, add(add(theta_0, beta_0), multiply(p, alpha)));
                } else {
                    current_statement_begin__ = 176;
                    stan::math::assign(theta_tilde, add(theta_0, beta_0));
                }
            } else {
                current_statement_begin__ = 179;
                lp_accum__.add(normal_log<propto__>(theta_0, mu, tau));
                current_statement_begin__ = 180;
                if (as_bool(logical_eq(fixed_main, 1))) {
                    current_statement_begin__ = 181;
                    stan::math::assign(theta_tilde, add(theta_0, multiply(p, alpha)));
                } else {
                    current_statement_begin__ = 183;
                    stan::math::assign(theta_tilde, theta_0);
                }
            }
            current_statement_begin__ = 188;
            if (as_bool(logical_eq(dist_main, 1))) {
                current_statement_begin__ = 189;
                for (int i = 1; i <= M; ++i) {
                    current_statement_begin__ = 190;
                    stan::model::assign(theta_tilde_star, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::math::exp(get_base1(theta_tilde, i, "theta_tilde", 1)) * get_base1(y_star, i, "y_star", 1)), 
                                "assigning variable theta_tilde_star");
                }
                current_statement_begin__ = 192;
                lp_accum__.add(poisson_log<propto__>(y_int, theta_tilde_star));
            } else if (as_bool(logical_eq(dist_main, 2))) {
                current_statement_begin__ = 195;
                lp_accum__.add(normal_log<propto__>(y, theta_tilde, s_0));
            } else {
                current_statement_begin__ = 198;
                lp_accum__.add(grid_lp(theta_tilde, ll, vals_evaled, n_vals, min_val, max_val, lp__, lp_accum__, pstream__));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("tau");
        names__.push_back("lambda");
        names__.push_back("eta");
        names__.push_back("delta");
        names__.push_back("gamma");
        names__.push_back("theta_0");
        names__.push_back("alpha");
        names__.push_back("omega");
        names__.push_back("beta_0");
        names__.push_back("beta_j");
        names__.push_back("theta_transformed");
        names__.push_back("delta_transformed");
        names__.push_back("tau_squared");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(dist_bias, 0) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(dist_bias, 0) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(dist_bias, 0) ? 0 : M ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(dist_bias, 0) ? 0 : M ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fixed_main ? K : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fixed_bias ? L : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(dist_bias, 0) ? 0 : M ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fixed_main ? M : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fixed_bias ? M : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_bbama_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mu = in__.scalar_constrain();
        vars__.push_back(mu);
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda = in__.vector_constrain((logical_eq(dist_bias, 0) ? 0 : 1 ));
        size_t lambda_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : 1 );
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            vars__.push_back(lambda(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_lb_constrain(0, (logical_eq(dist_bias, 0) ? 0 : 1 ));
        size_t eta_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : 1 );
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta = in__.vector_constrain((logical_eq(dist_bias, 0) ? 0 : M ));
        size_t delta_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            vars__.push_back(delta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma = in__.vector_lb_constrain(0, (logical_eq(dist_bias, 0) ? 0 : M ));
        size_t gamma_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            vars__.push_back(gamma(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_0 = in__.vector_constrain(M);
        size_t theta_0_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < theta_0_j_1_max__; ++j_1__) {
            vars__.push_back(theta_0(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_constrain((fixed_main ? K : 0 ));
        size_t alpha_j_1_max__ = (fixed_main ? K : 0 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> omega = in__.vector_constrain((fixed_bias ? L : 0 ));
        size_t omega_j_1_max__ = (fixed_bias ? L : 0 );
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            vars__.push_back(omega(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_0 = in__.vector_constrain((logical_eq(dist_bias, 0) ? 0 : M ));
        size_t beta_0_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < beta_0_j_1_max__; ++j_1__) {
            vars__.push_back(beta_0(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_j = in__.vector_constrain(N);
        size_t beta_j_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < beta_j_j_1_max__; ++j_1__) {
            vars__.push_back(beta_j(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 202;
            validate_non_negative_index("theta_transformed", "(fixed_main ? M : 0 )", (fixed_main ? M : 0 ));
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta_transformed((fixed_main ? M : 0 ));
            stan::math::initialize(theta_transformed, DUMMY_VAR__);
            stan::math::fill(theta_transformed, DUMMY_VAR__);
            current_statement_begin__ = 203;
            validate_non_negative_index("delta_transformed", "(fixed_bias ? M : 0 )", (fixed_bias ? M : 0 ));
            Eigen::Matrix<double, Eigen::Dynamic, 1> delta_transformed((fixed_bias ? M : 0 ));
            stan::math::initialize(delta_transformed, DUMMY_VAR__);
            stan::math::fill(delta_transformed, DUMMY_VAR__);
            current_statement_begin__ = 204;
            double tau_squared;
            (void) tau_squared;  // dummy to suppress unused var warning
            stan::math::initialize(tau_squared, DUMMY_VAR__);
            stan::math::fill(tau_squared, DUMMY_VAR__);
            stan::math::assign(tau_squared,pow(tau, 2));
            // generated quantities statements
            current_statement_begin__ = 205;
            if (as_bool(fixed_main)) {
                current_statement_begin__ = 206;
                stan::math::assign(theta_transformed, add(theta_0, multiply(p, alpha)));
            }
            current_statement_begin__ = 208;
            if (as_bool(fixed_bias)) {
                current_statement_begin__ = 209;
                stan::math::assign(delta_transformed, add(delta, multiply(q, omega)));
            }
            // validate, write generated quantities
            current_statement_begin__ = 202;
            size_t theta_transformed_j_1_max__ = (fixed_main ? M : 0 );
            for (size_t j_1__ = 0; j_1__ < theta_transformed_j_1_max__; ++j_1__) {
                vars__.push_back(theta_transformed(j_1__));
            }
            current_statement_begin__ = 203;
            size_t delta_transformed_j_1_max__ = (fixed_bias ? M : 0 );
            for (size_t j_1__ = 0; j_1__ < delta_transformed_j_1_max__; ++j_1__) {
                vars__.push_back(delta_transformed(j_1__));
            }
            current_statement_begin__ = 204;
            check_greater_or_equal(function__, "tau_squared", tau_squared, 0);
            vars__.push_back(tau_squared);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_bbama";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t lambda_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : 1 );
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : 1 );
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_0_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < theta_0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_1_max__ = (fixed_main ? K : 0 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t omega_j_1_max__ = (fixed_bias ? L : 0 );
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_0_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < beta_0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < beta_j_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_j" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t theta_transformed_j_1_max__ = (fixed_main ? M : 0 );
        for (size_t j_1__ = 0; j_1__ < theta_transformed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_transformed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_transformed_j_1_max__ = (fixed_bias ? M : 0 );
        for (size_t j_1__ = 0; j_1__ < delta_transformed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_transformed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_squared";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t lambda_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : 1 );
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : 1 );
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_0_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < theta_0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_1_max__ = (fixed_main ? K : 0 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t omega_j_1_max__ = (fixed_bias ? L : 0 );
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_0_j_1_max__ = (logical_eq(dist_bias, 0) ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < beta_0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < beta_j_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_j" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t theta_transformed_j_1_max__ = (fixed_main ? M : 0 );
        for (size_t j_1__ = 0; j_1__ < theta_transformed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_transformed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_transformed_j_1_max__ = (fixed_bias ? M : 0 );
        for (size_t j_1__ = 0; j_1__ < delta_transformed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_transformed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_squared";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_bbama_namespace::model_bbama stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
